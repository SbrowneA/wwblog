# # # # MIGRATIONS
1.
makemigrations wwapp

2.
migrate wwapp


# # # # TESTING COMMANDS
# # DJANGO TEST COMMANDS
# test specified app
py manage.py test wwapp

# test specified module in app
py manage.py test wwapp.tests

# test specified class file in app
py manage.py test wwapp.tests.model_tests

# test specified method in file
py manage.py test wwapp.tests.model_tests.test_some_method
^not working??


# # COVERAGE FOR TESTING
pip install coverage

# run coverage tests
1.
coverage run --omit='*/Lib/*' manage.py test
coverage run --omit='*/venv/*' manage.py test
2.
coverage report
3.
coverage html

# MODEL BAKERY TO GENERATE DUMMY DATA
pip install model-bakery

from model_bakery import baker
from pprint import pprint

# setup method
self.some_model =  baker.make('name_of_instance')
pprtint(self.some_model.__dict__)
print(self.some_model.__dict__)?


## PIP COMMANDS

pip freeze

pip list

pip check

pip install [package name]
in command promt
-m pip install --upgrade pip

pip install --upgrade requests

pip install -r requirements.txt
OR
pip install -r /path/to/requirements.txt

# update all packages (in python)
import pkg_resources
from subprocess import call

packages = [dist.project_name for dist in pkg_resources.working_set]
call("pip install --upgrade " + ' '.join(packages), shell=True)

## VIRTUAL ENV COMMANDS

# make new folder and cd into it
makedir [new folder name]
cd !$

# setup venv
pip install virtualenv

py -m pip install --user virtualenv

# create new virtual env (same as making a new venv through pycharm)
py -m virtualenv [env name]
# or for venv
py -m venv [env name]

# activate env
.\[env name]\Scripts\activate

# deactivate env
deactivate

# install tinymce
https://django-tinymce.readthedocs.io/en/latest/installation.html
# add to requirements.txt
django-tinymce==3.2.0


# HEROKU CLI
# show logs for a specific app
heroku logs --app=app-name

# check how many dynos are running
heroku ps

# scale dynos (1=on or 0=off)
heroku ps:scale web=0



## AWS CLI COMMANDS
aws s3 cp C:/users/sam/documents/github/wwblog/static/img.jpg s3://wwblog-storage/
# prints when successful - upload: static\img.jpg to s3://wwblog-storage/img.jpg

aws s3 cp s3://wwblog-storage/img.jpg C:/users/sam/documents/github/wwblog/media/
# prints when successful - download: s3://wwblog-storage/img.jpg to media\img.jpg
